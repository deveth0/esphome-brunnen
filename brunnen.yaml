esphome:
  name: esp32-brunnen
  friendly_name: esp32-brunnen
  platformio_options:
    upload_speed: 921600

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

ota:
  platform: esphome

wifi:
  ssid: !secret wifi_ssid 
  password: !secret wifi_password
  fast_connect: true
  ap: {}

captive_portal:

logger:
  level: DEBUG

api:
  password: ""

time:
  - platform: homeassistant
    id: esptime

deep_sleep:
  id: deep_sleep_control
  run_duration: 60s
  sleep_duration: 1800s # once an hour

one_wire:
  - platform: gpio
    pin: 5

# Enable more information logged into homeassistant
debug:
  update_interval: 5s
#
text_sensor:
  - platform: debug
    device:
      name: "Device Info"
    reset_reason:
      name: "Reset Reason"

sensor:
  - platform: dallas_temp
    name: "Temperatur Wasser"
    device_class: temperature

  - platform: adc
    pin: GPIO39
    id: "battery_voltage"
    name: "Batterie Voltage"
    attenuation: auto
    update_interval: 30s
    on_value:
      then:
        component.update: battery_percentage

  - platform: template
    name: "Battery"
    id: battery_percentage
    unit_of_measurement: '%'
    accuracy_decimals: 0
    update_interval: never
    device_class: battery
    lambda: |-
      return id(battery_voltage).state;
    filters:
      - calibrate_linear:  
        - 3.16 -> 1.0
        - 2.26 -> 0.0 
      - clamp:
          min_value: 0.0
          max_value: 1.0
          ignore_out_of_range: true
      - multiply: 100
      - round: 0

  - platform: adc
    pin: GPIO34
    name: "Solar Voltage"
    id: "solar_voltage"
    attenuation: auto
    update_interval: 3s
    filters:
      - sliding_window_moving_average:
          window_size: 10
          send_every: 10
      - multiply: 2 # depends on the used solar panel and resistors

  - platform: adc
    pin: GPIO35
    name: "Wasserstand Voltage"
    id: levelraw
    attenuation: auto
    update_interval: 3s
    on_value:
      then:
        component.update: waterlevel
    filters:
      - clamp: # remove nonesense readings
          min_value: 0.2
          ignore_out_of_range: true
      - sliding_window_moving_average:
          window_size: 10
          send_every: 10

  - platform: template
    name: "Wasserstand"
    id: waterlevel
    update_interval: never
    accuracy_decimals: 0
    unit_of_measurement: cm
    icon: "mdi:car-coolant-level"
    lambda: |-
      return id(levelraw).state;
    filters:
      - filter_out: NAN
      - calibrate_linear:
            - 0.24 -> 0.0
#            - 0.33 -> 0.12
#            - 0.35 -> 0.23
#            - 0.60 -> 1.2
#            - 0.65 -> 2.2 # ?? 
#            - 0.91 -> 3.2
            - 1.32 -> 4.2
      - multiply: 100



binary_sensor:
  - platform: homeassistant
    id: enable_deep_sleep
    name: Enable Deep Sleep
    entity_id: input_boolean.enable_esphome_deepsleep
    publish_initial_state: true
    on_state:
      then:
        - script.execute: consider_deep_sleep

  - platform: template
    id: charging
    name: Charging
    lambda: return id(solar_voltage).state > 4.2;

switch:
  - platform: gpio
    id: sensor_switch
    pin: GPIO33
    restore_mode: ALWAYS_ON # Enable pressure sensor

script:
  - id: consider_deep_sleep
    mode: queued
    then:
      - if:
          condition:
            binary_sensor.is_off: enable_deep_sleep
          then:
            - logger.log: 'Skipping sleep, per enable_deep_sleep'
            - deep_sleep.prevent: deep_sleep_control
          else:
            - logger.log: 'Enable sleep, per enable_deep_sleep'
            - deep_sleep.allow: deep_sleep_control